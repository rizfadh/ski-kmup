// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  phoneNumber   String
  domicile      String
  faculty       String
  major         String
  image         String?

  registerApproval RegisterApproval?
  userPosition     UserPosition?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post        Post[]
  postLike    PostLike[]
  cashPayment CashPayment[]
  cashInOut   CashInOut[]
}

enum UserRole {
  ADMIN
  PASSIVE
  ACTIVE
}

model UserPosition {
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String   @id
  title  String?
  role   UserRole @default(PASSIVE)
}

model RegisterApproval {
  id       String   @id @default(cuid())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String   @unique
  division String[]
  reason   String

  isAccepted Boolean   @default(false)
  acceptedAt DateTime?
}

model Advice {
  id        String   @id @default(cuid())
  email     String
  adviceFor String
  advice    String
  createdAt DateTime @default(now())
}

model Post {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [createdBy], references: [id])
  createdBy  String
  imageUrl   String
  title      String
  content    String
  isAccepted Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  postLike PostLike[]
}

model PostLike {
  like   Boolean
  user   User    @relation(fields: [userId], references: [id])
  userId String
  post   Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  @@id([userId, postId])
}

model CashPayment {
  id     String   @id @default(cuid())
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  due    DateTime
  amount Int
  month  String
  paid   Boolean  @default(false)

  cashPaymentHistory CashPaymentHistory[]
}

model CashPaymentHistory {
  id String @id @default(cuid())

  cashPayment CashPayment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentId   String

  status      String
  paymentType String
  amount      Int
  time        DateTime
}

enum CashInOutType {
  IN
  OUT
}

model CashInOut {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  type        CashInOutType
  description String
  amount      Int
  date        DateTime
  createdAt   DateTime      @default(now())
}
